import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { useContext } from "react";
import { useParams } from "react-router-dom";
import OrderContents from '../components/Order/OrderContents.jsx';
import OrderCertify from "../components/Order/OrderCertify.jsx";
import OrderModal from "../components/Order/OrderModal.jsx";
import axios from "axios";
import ReactModal from "react-modal";
import { useProduct } from "../hooks/useProduct.js";
import { ProductContext } from '../context/ProductContext.js';
import { useCustomers } from "../hooks/useCustomers.js"; 
import { CustomersContext } from "../context/CustomersContext.js";
import { useGuests } from "../hooks/useGuest.js";
import { GuestContext } from "../context/GuestContext.js";
export default function Order() {
    const navigate = useNavigate();
    const { pid } = useParams();
    const { pidItem } = useContext(ProductContext); // Í∞úÎ≥Ñ ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞
    const { getPidItem } = useProduct();

    const {customersList} = useContext(CustomersContext); // Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥
    const { getCustomersList, getCustomer } = useCustomers();

    const {guestList} = useContext(GuestContext);
    const {getGuestList} = useGuests();

    // Î™®Îã¨ ÏÉÅÌÉú
    const [isModalOpen, setIsModalOpen] = useState(false);

    // Ï£ºÎ¨∏Ìï† ÏÉÅÌíà Î¶¨Ïä§Ìä∏
    // const orderItems = [
    //     { id: 1, image: "https://via.placeholder.com/100", name: "ÏÉÅÌíà A", discount: "10%", shipping: "Î¨¥Î£å Î∞∞ÏÜ°", price: "10000" },
    //     { id: 2, image: "https://via.placeholder.com/100", name: "ÏÉÅÌíà B", discount: "5%", shipping: "Ïú†Î£å Î∞∞ÏÜ° (‚Ç©3,000)", price: "20000" }
    // ];
    useEffect(() => {
        const customersList = async () => {
            try {
                const name = "dxzf76";
                await getCustomer({name});
            } catch (error) {
                console.error("‚ùå Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
            }
        };

        customersList();
    }, []);

    console.log("üìå Ï†ÑÏ≤¥ Í≥†Í∞ù Î¶¨Ïä§Ìä∏:", customersList); // Ïûò Î∞õÏïÑÏôÄÏßê

    useEffect(() => {
        const guestsList = async () => {
            try {
                await getGuestList();
            } catch (error) {
                console.error("‚ùå ÎπÑÌöåÏõê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
            }
        };

        guestsList();
    }, []);

    console.log("üìå Ï†ÑÏ≤¥ ÎπÑÌöåÏõê Î¶¨Ïä§Ìä∏:", guestList); // Ïûò Î∞õÏïÑÏôÄÏßê


    
    useEffect(() => {
        const pullProductData = async () => {
            try {
                await getPidItem(pid);
                
            } catch (error) {
                console.error("‚ùå ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
            }
        };
    
        if (pid) {
            pullProductData();
        }
    }, [pid]);
    
    console.log("pidItem" , pidItem);
    

    // `formData` ÏÉÅÌÉú Ïú†ÏßÄ
    const [formData, setFormData] = useState({
        name: "",
        phone: "",
        email: "",
        address: "",
        message: ""
    });

    // ÏûÖÎ†• ÌïÑÎìú Í∞íÏùÑ Ï∂îÏ†ÅÌï† refs ÏÉùÏÑ± (Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïãú ÏÇ¨Ïö©)
    const nameRef = useRef(null);
    const phoneRef = useRef(null);
    const emailRef = useRef(null);
    const addressRef = useRef(null);
    const messageRef = useRef(null);

    const [token, setToken] = useState(null);
    const [selectedPayMethod, setSelectedPayMethod] = useState("CREDIT_CARD_PAY");

    useEffect(() => {
        const storedToken = localStorage.getItem("token");
        setToken(storedToken);
        console.log("ÌòÑÏû¨ ÌÜ†ÌÅ∞ ÏÉÅÌÉú:", storedToken);
        
        // ‚úÖ ÌÜ†ÌÅ∞Ïù¥ guest_token_ÏúºÎ°ú ÏãúÏûëÌïòÎ©¥ formData.nameÏùÑ guest_idÎ°ú ÏÑ§Ï†ï
        setFormData((prevFormData) => ({
            ...prevFormData,
            name: storedToken?.startsWith("guest_token_") ? "guest_id" : localStorage.getItem("user_id"), //Í≤åÏä§Ìä∏Î°ú ÏßÑÏûÖÌñàÏùÑ Îïå "guest_id"Î°ú ÏïÑÏù¥Îîî Ìèº ÏûÖÎ†•
            customer_id: storedToken?.startsWith("guest_token_") // customer_id ÌÖåÏù¥Î∏îÏóêÎäî guest_tokenÏúºÎ°ú ÏãúÏûëÌïúÎäî Í≤ΩÏö∞Ïóê guest_0000
            ? "guest_0000"  // Í≤åÏä§Ìä∏Ïùº Í≤ΩÏö∞ Í∏∞Î≥∏ ID ÏÑ§Ï†ï
            : localStorage.getItem("user_id") || "unknown_user", // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê ID

        }));
    }, []);

    const isAuthorized = !!token; // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ true, ÏóÜÏúºÎ©¥ false

    // ref Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    const validateOrder = () => {
        let missingFields = [];

        if (!formData.name || !nameRef.current?.value) missingFields.push("Ïù¥Î¶Ñ");
        if (!formData.phone || !phoneRef.current?.value) missingFields.push("Ìú¥ÎåÄÌè∞ Î≤àÌò∏");
        if (!formData.email || !emailRef.current?.value) missingFields.push("Ïù¥Î©îÏùº");
        if (!formData.address || !addressRef.current?.value) missingFields.push("Î∞∞ÏÜ° Ï£ºÏÜå");
        if (!formData.message || !messageRef.current?.value) missingFields.push("Î∞∞ÏÜ° Î©îÏãúÏßÄ");

        if (missingFields.length > 0) {
            console.log("ÏûÖÎ†•ÎêòÏßÄ ÏïäÏùÄ ÌïÑÎìú:", missingFields.join(", "));
            alert(`Îã§Ïùå Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî: ${missingFields.join(", ")}`);
            return false;
        }

        return true;
    };

    // Ï£ºÎ¨∏Ìèº Ï†úÏ∂ú Ìï∏Îì§Îü¨
    const handleOrderSubmit = (e) => {
        e.preventDefault();

        console.log("Í≤∞Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠ - ÌòÑÏû¨ ÌÜ†ÌÅ∞:", token);

        if (!isAuthorized) {
            alert("Î°úÍ∑∏Ïù∏ ÎòêÎäî Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        const agreeCheckbox = document.getElementById("btnAgreePurchase");
        if (!agreeCheckbox.checked) {
            alert("Íµ¨Îß§ ÎèôÏùòÏóê Ï≤¥ÌÅ¨Ìï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        if (!validateOrder()) {
            return;
        }

        console.log("ÏÉÅÌíà Ï†ïÎ≥¥:", pidItem);
        console.log("ÏÑ†ÌÉùÎêú Í≤∞Ï†ú ÏàòÎã®:", selectedPayMethod);
        console.log("ÏûÖÎ†• Ìèº Ï†ïÎ≥¥:", formData);

        // ‚úÖ Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ùÏ≤¥ ÏÉùÏÑ±
        const orderData = {
            customer_id: token?.startsWith("guest_token_") ? "guest_0000" : localStorage.getItem("customer_id"),
            guest_id: token?.startsWith("guest_token_") ? `guest_${Date.now()}` : null,
            order_number: `ORD-${Date.now()}`, // ‚úÖ Ïú†ÎãàÌÅ¨Ìïú Ï£ºÎ¨∏Î≤àÌò∏ ÏÉùÏÑ±
            total_price: pidItem?.saleprice || 0,
            zipcode: formData.zipcode || "",
            shipping_address: formData.address || "",
            detail_address: formData.detail_address || "",
            status: "Pending", // ‚úÖ Ï£ºÎ¨∏ ÏÉÅÌÉú Í∏∞Î≥∏Í∞í
            refund_amount: 0, // ‚úÖ Í∏∞Î≥∏Í∞í
            payment_method: selectedPayMethod,
            ordered_products: [
                {
                    product_id: pidItem?.pid,
                    product_name: pidItem?.title,
                    product_price: pidItem?.saleprice,
                    quantity: 1, // Í∏∞Î≥∏Í∞í (ÏàòÎüâ Í∏∞Îä• Ï∂îÍ∞Ä Í∞ÄÎä•)
                },
            ],
        };
        
        console.log("üìå ÏµúÏ¢Ö Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞:", orderData);

        
        alert("Í≤∞Ï†úÏôÑÎ£å");
   
        // Î™®Îã¨ Ïó¥Í∏∞
        setIsModalOpen(true);
    };

    // Ï£ºÎ¨∏ ÎÇ¥Ïó≠ ÌôïÏù∏ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÎßàÏù¥ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    const handleConfirmOrder = () => {
        setIsModalOpen(false);
        navigate("/person");
    };


    return (
        <section id="order" className="content-wrap content-wrap-padding">
            <h1>Ï£ºÎ¨∏/Í≤∞Ï†ú</h1>
            <div className="form_wrap">
                <form onSubmit={handleOrderSubmit}>
                    <table className="grid_wrap goods" style={{ backgroundColor: "yellow" }}>
                        <thead>
                            <tr>
                                <th colSpan="2">ÏÉÅÌíàÏ†ïÎ≥¥</th>
                                <th>Ìï†Ïù∏/ÌòúÌÉù</th>
                                <th>Î∞∞ÏÜ° Ï†ïÎ≥¥</th>
                                <th>Ï£ºÎ¨∏Í∏àÏï°</th>
                            </tr>
                        </thead>
                        <tbody className="all-group">
                            {/* {orderItems.map((item) => (
                                <tr key={item.id}>
                                    <td><img src={item.image} alt={item.name} width="100" /></td>
                                    <td>{item.name}</td>
                                    <td>{item.discount}</td>
                                    <td>{item.shipping}</td>
                                    <td>{item.price}</td>
                                </tr>
                            ))} */}
                            {pidItem && 
                            <tr key={pidItem.pid}>
                                <td><img src={pidItem.image?.[0]} alt={pidItem.title || "ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ"} style={{width:"100px", margin:"0"}} /></td>
                                <td>{pidItem.title}</td>
                                <td>{pidItem.discount}%</td>
                                <td>{pidItem.deliveryFee}</td>
                                <td>{pidItem.saleprice}</td>
                            </tr>}
                            
                        </tbody>
                    </table>

                    {!isAuthorized && <OrderCertify />}

                    <OrderContents
                        formData={formData}
                        setFormData={setFormData}
                        orderItems={pidItem}
                        handleOrderSubmit={handleOrderSubmit}
                        selectedPayMethod={selectedPayMethod}
                        setSelectedPayMethod={setSelectedPayMethod}
                        refs={{ nameRef, phoneRef, emailRef, addressRef, messageRef }}
                    />
                </form>
            </div>

            {/* Í≤∞Ï†ú ÏÑ±Í≥µ Ïãú Ï£ºÎ¨∏ÎÇ¥Ïó≠ ÌôïÏù∏ Î™®Îã¨ */}
            <OrderModal
            isModalOpen={isModalOpen}
            handleConfirmOrder={handleConfirmOrder}
            setIsModalOpen={setIsModalOpen}/>
        </section>
    );
}
